(define (let-decls exp) (cadr exp))
(define (let-body exp) (cddr exp))
(define (let-var decl) (car decl))
(define (let-exp decl) (cadr decl))
(define (let-vars decls)
  (if (null? decls)
      '()
      (cons (let-var (car decls))
            (let-vars (cdr decls)))))
(define (let-exps decls)
  (if (null? decls)
      '()
      (cons (let-exp (car decls))
            (let-exps (cdr decls)))))
(define (let->lambda exp)
  (let ((vars (let-vars (let-decls exp)))
        (body (let-body exp))
        (exps (let-exps (let-decls exp))))
    (cons (make-lambda vars body) exps)))
(put-syntax! 'let (lambda (exp env) (eval (let->lambda exp) env)))
; CORRECT

